<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.member.dao.IMemberDAO">

	<select id="selectMemberForAuth" parameterType="string" resultType="MemberVO">
		SELECT MEM_ID, MEM_PASS, MEM_NAME
				, MEM_MAIL
				, MEM_ROLE
				, MEM_IMG   
		FROM MEMBER                                   
		WHERE MEM_ID = #{mem_id}  AND MEM_DELETE IS NULL 
	</select>
	
	<resultMap type="MemberVO" id="memberMap" autoMapping="true">
		<id property="mem_id" column ="MEM_ID"/> <!-- pk역할을 식별. MemberVO 가 중복 되는것을 방지 -->
		<!-- <result property="mem_name" column="MEM_NAME"/>
		<result property="mem_pass" column="MEM_PASS"/> -->
		
		<collection property="prodList" ofType="ProdVO" 
					javaType="java.util.Set"
			 			autoMapping="true">
		<id property="prod_id" column="PROD_ID"/>
		<!-- 	<result property="prod_name" column="PROD_NAME"/> -->
		
		<!-- 1:1 구조 사용할땐 association 사용 -->
		<association property="buyer" javaType="BuyerVO" autoMapping="true">
			<!-- 반드시 id property 를 넣어줄 필요는 없다.  -->
			<!-- <id property="buyer_id" column="BUYER_ID"/> -->
		</association>
		</collection>
	</resultMap>
	
	<select id="selectMemberDetail" parameterType="string" resultMap="memberMap">
		 WITH CARTPROD AS (
		 	SELECT DISTINCT  CART_MEMBER, CART_PROD
		 	FROM CART
		 ), PRODALL AS (
		 		SELECT PROD.*, LPROD_NM, BUYER.*
		 		FROM PROD INNER JOIN LPROD ON (PROD_LGU = LPROD_GU)
		 				  INNER JOIN BUYER ON (PROD_BUYER = BUYER_ID)
		 )
		 
		 
		 SELECT                                                         
		     MEM_ID,    MEM_PASS,    MEM_NAME,                          
		     MEM_REGNO1,    MEM_REGNO2,                                 
		     TO_CHAR(MEM_BIR, 'YYYY-MM-DD') MEM_BIR,                    
			 MEM_ZIP,    MEM_ADD1,    MEM_ADD2,                         
		     MEM_HOMETEL,    MEM_COMTEL,    MEM_HP,                     
		     MEM_MAIL,    MEM_JOB,    MEM_LIKE,                         
		     MEM_MEMORIAL,                                              
		     TO_CHAR(MEM_MEMORIALDAY, 'YYYY-MM-DD') MEM_MEMORIALDAY,    
		     MEM_MILEAGE, MEM_DELETE
		     , MEM_ROLE
		     , MEM_IMG
		     , PROD_ID, PROD_NAME
		     , PROD_COST, PROD_PRICE, PROD_MILEAGE
		     , LPROD_NM
		     , BUYER_NAME, BUYER_ADD1                                    
		 FROM    MEMBER LEFT OUTER JOIN CARTPROD ON(MEM_ID = CART_MEMBER) 
		 				 LEFT OUTER JOIN PRODALL ON(CART_PROD = PROD_ID)                                                
		 WHERE MEM_ID = #{mem_id} <!-- 인라인 파라미터 -->   
	</select>
	
	<update id="updateMember" parameterType="MemberVO">
			<!-- 전달되는 파라미터가 여러개인 상황. 식별성이 필요하다. 인라인파라미터에 식별성을 준다. -->
			UPDATE MEMBER            
		    SET                      
		        MEM_NAME 	=	#{mem_name,jdbcType=VARCHAR},         
		        MEM_BIR		=	TO_DATE(#{mem_bir,jdbcType=DATE}, 'YYYY-MM-DD'),          
		        MEM_ZIP		=	#{mem_zip,jdbcType=VARCHAR},          
		        MEM_ADD1	=	#{mem_add1,jdbcType=VARCHAR},         
		        MEM_ADD2	=	#{mem_add2,jdbcType=VARCHAR},         
		        MEM_HOMETEL	=	#{mem_hometel,jdbcType=VARCHAR},      
		        MEM_COMTEL	=	#{mem_comtel,jdbcType=VARCHAR},       
		        MEM_HP		=	#{mem_hp,jdbcType=VARCHAR},           
		        MEM_MAIL	=	#{mem_mail,jdbcType=VARCHAR},         
		        MEM_JOB		=	#{mem_job,jdbcType=VARCHAR},  <!-- null 값이 나올수 있기때문에 jdbcType=VARCHAR 설정  -->        
		        MEM_LIKE	=	#{mem_like,jdbcType=VARCHAR},         
		        MEM_MEMORIAL	=	#{mem_memorial,jdbcType=VARCHAR},     
		        MEM_MEMORIALDAY	=	TO_DATE(#{mem_memorialday,jdbcType=DATE} , 'YYYY-MM-DD')            
				<if test="mem_img!=null">
				, MEM_IMG = #{mem_img,jdbcType=BLOB}
				</if>
			
			WHERE   MEM_ID		=	#{mem_id,jdbcType=VARCHAR}        
	</update>
	
	
	<insert id="insertMember">
		 INSERT INTO MEMBER (                                      
			     MEM_ID,    MEM_PASS,    MEM_NAME,                 
			     MEM_REGNO1,    MEM_REGNO2,    MEM_BIR,            
			     MEM_ZIP,    MEM_ADD1,    MEM_ADD2,                
			     MEM_HOMETEL,    MEM_COMTEL,    MEM_HP,            
			     MEM_MAIL,    MEM_JOB,    MEM_LIKE,                
			     MEM_MEMORIAL,    MEM_MEMORIALDAY,    MEM_MILEAGE
			     , MEM_ROLE  
			     , MEM_IMG
			 ) VALUES (                                            
			 		#{mem_id,jdbcType=VARCHAR}, #{mem_pass,jdbcType=VARCHAR}, #{mem_name,jdbcType=VARCHAR},                                 
			 	    #{mem_regno1,jdbcType=VARCHAR}, #{mem_regno2,jdbcType=VARCHAR}, TO_DATE(#{mem_bir,jdbcType=DATE}, 'YYYY-MM-DD'),           
			 	    #{mem_zip,jdbcType=VARCHAR}, #{mem_add1,jdbcType=VARCHAR}, #{mem_add2,jdbcType=VARCHAR},                                 
			 	    #{mem_hometel,jdbcType=VARCHAR}, #{mem_comtel,jdbcType=VARCHAR}, #{mem_hp,jdbcType=VARCHAR},                                 
			 	    #{mem_mail,jdbcType=VARCHAR},  #{mem_job,jdbcType=VARCHAR},  #{mem_like,jdbcType=VARCHAR},                                 
			 	    #{mem_memorial,jdbcType=VARCHAR}, TO_DATE(#{mem_memorialday,jdbcType=DATE} , 'YYYY-MM-DD'), 3000  
			 	    , 'ROLE_USER'
			 	    , #{mem_img,jdbcType=BLOB}      
			 )													
	
	</insert>
	
	<delete id="deleteMember" parameterType="string">
		UPDATE MEMBER 
		SET MEM_DELETE = 'Y' 
		WHERE MEM_ID = #{mem_id}  
	</delete>
	
	<!-- 코드 플레그먼트  -->
	<sql id="searchFrag"> <!-- 코드의 일부분을 가지고 있음. -->
		 <where>
					 <if test="simpleSearch!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(simpleSearch.searchWord)">
					 	<choose> <!-- switch / case when end 구조  -->
					 		<when test="simpleSearch.searchType eq 'name'">
					 			INSTR(MEM_NAME, #{simpleSearch.searchWord}) > 0 
					 		</when>
					 		<when test="simpleSearch.searchType eq 'address'">
					 			INSTR(MEM_ADD1, #{simpleSearch.searchWord}) > 0 
					 		</when>
					 		<otherwise> <!-- 전체 검색  -->
					 			INSTR(MEM_NAME, #{simpleSearch.searchWord}) > 0 
					 			OR
					 			INSTR(MEM_ADD1, #{simpleSearch.searchWord}) > 0 
					 		</otherwise>
					 	</choose> 
					
					<!--  	<if test="simpleSearch.searchType eq 'name'">
					 	
					 	</if>
					 	<if test="simpleSearch.searchType eq 'address'">
					 	
					 	</if> -->
					 </if>
				 </where>
	</sql>
	
	<select id="selectMemberList" resultType="MemberVO" parameterType="PagingVO">
		 SELECT B.*
		 FROM (
			 SELECT A.*, ROWNUM RNUM
			 FROM(
				 SELECT ROWID RID, MEM_ID, MEM_NAME, MEM_MAIL,     
				 MEM_HP, MEM_MILEAGE, MEM_DELETE     
				 ,MEM_ADD1   
				 FROM MEMBER 
					<include refid="searchFrag" />
				 ORDER BY RID DESC
			 ) A
		 ) B
		 <![CDATA[
			 WHERE RNUM >= #{startRow} AND RNUM <= #{endRow} 
		 ]]>
	</select>
	
	<select id="selectTotalRecord" resultType="int"
				parameterType="PagingVO">
		SELECT COUNT(*)
		FROM MEMBER
		 <!-- if where를 사용하기 위해선 paging 이 넘어와야 한다. -->
		<include refid="searchFrag" />
	</select>
	
	<select id="realDeleteMembers" parameterType="map" statementType="CALLABLE">  <!-- 면 콜러블 스테이트먼트가 있어야 프로시져 호출 할 수 있는 쿼리 객체가 만들어진다.. {}익명블럭으로 특정 프로시져 호출CALL -->
		{
			CALL MEMBERDELETEPROC(#{delcount,mode=OUT, javaType=java.lang.Integer,jdbcType=NUMERIC})
			<!-- #{delcount,mode=OUT,javaType=java.lang.Integer} : OUT BOUND 값이기 때문에 mode 도 지정해둔다.  또한, 넘버데이터가 db 에서 넘어오기때문에 자바로 올때의 형식 지정해준다 -->
		}
	</select>
	
</mapper>